buildscript {
    ext {
        springBootVersion = '2.3.2.RELEASE'

    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.15.0"
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin : 'java'
apply plugin : 'idea'
apply plugin : 'org.springframework.boot'
apply plugin : 'io.spring.dependency-management'
apply plugin : 'checkstyle' // 정적분석 툴

group = 'com.wnsgml972'
version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'io.projectreactor:reactor-test'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    useJUnitPlatform()
}

processResources {
    filesMatching("**/application.yml") {
        expand(project.properties)
    }
}

// [ Plugin 세부 설정 ] ------------------------------------------------------------------------
// 1. Code Style 라이브러리
checkstyle {
    toolVersion = "7.6"
    configFile = rootProject.file('codequality/checkstyle.xml') as File
    ignoreFailures = true
    showViolations = true
}

// 2. 코드 내 라이센스 관련 라이브러리
// 프로젝트의 모든 소스코드에는 라이선스가 표기되어 있어야 한다는 요구사항이 있다고 가정하자.
// 이제 헤더에 라이선스가 기록되지 않은 소스코드를 만들고 빌드하면 빌드 에러가 발생할 것이다.
// `./gradlew licenseFormat` 를 실행하면 자동으로 라이선스가 빠진 소스코드에 헤더를 넣어준다.
license {
    header rootProject.file('codequality/HEADER')
    strictCheck true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Company'
    ext.email = 'support@company.com'
}

// 3. 코드 커버리지 라이브러리
// Reference : https://jojoldu.tistory.com/275
// cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
